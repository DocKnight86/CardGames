@rendermode InteractiveServer
@page "/blackjack"
@using CardGames.Services
@inject BlackjackService BlackjackService
@inject ILogger<Blackjack> Logger

<h3>Blackjack</h3>

<div>
    <h4>Player's Hand (@BlackjackService.CalculateHandValue(BlackjackService.GetPlayerHand()) points):</h4>
    <ul class="card-list">
        @foreach (var card in BlackjackService.GetPlayerHand())
        {
            <li><img src="@GetCardImage(card)" alt="@card.ToString()" width="100" /></li>
        }
    </ul>

    <h4>Dealer's Hand (@BlackjackService.CalculateHandValue(BlackjackService.GetVisibleDealerHand()) points):</h4>
    <ul class="card-list">
        @foreach (var card in BlackjackService.GetVisibleDealerHand())
        {
            <li><img src="@GetCardImage(card)" alt="@card.ToString()" width="100" /></li>
        }
        @if (!hasPlayerStood)
        {
            <li>[Hidden Card]</li> <!-- Hide the second card before player stands -->
        }
    </ul>

    <p>@gameResult</p>

    <p>Player Balance: $@playerBalance</p>

    @if (!isGameOver)
    {
        <button @onclick="PlayerHit" disabled="@hasPlayerStood">Hit</button>
        <button @onclick="PlayerStand" disabled="@hasPlayerStood">Stand</button>
    }
    else
    {
        <button @onclick="StartNewGame">Start New Game</button>
    }
</div>

<style>
    .card-list {
        display: flex;
        flex-wrap: wrap;
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .card-list li {
        margin: 5px;
    }

    .card-list img {
        max-width: 100px;
        height: auto;
    }
</style>

@code {
    private bool hasPlayerStood = false;
    private bool isGameOver = false;
    private string gameResult = string.Empty;
    private int playerBalance = 500;

    private void StartNewGame()
    {
        BlackjackService.InitializeGame();
        hasPlayerStood = false;
        isGameOver = false;
        gameResult = string.Empty;
        playerBalance -= 5; // Deduct $5 for each new hand
        StateHasChanged();
    }

    private void PlayerHit()
    {
        Logger.LogInformation("PlayerHit function activated");
        BlackjackService.GetPlayerHand().Add(BlackjackService.DrawCard());

        if (BlackjackService.IsGameOver())
        {
            EndGame("Player busts!");
        }

        StateHasChanged();
    }

    private void PlayerStand()
    {
        Logger.LogInformation("PlayerStand function activated");
        hasPlayerStood = true;

        // Reveal dealer's second card after player stands
        BlackjackService.RevealDealerHand();
        BlackjackService.PlayerStands();

        EndGame(DetermineGameResult());
        StateHasChanged();
    }

    private void EndGame(string result)
    {
        gameResult = result;
        isGameOver = true;
    }

    private string DetermineGameResult()
    {
        var playerValue = BlackjackService.CalculateHandValue(BlackjackService.GetPlayerHand());
        var dealerValue = BlackjackService.CalculateHandValue(BlackjackService.GetDealerHand());

        if (dealerValue > 21)
        {
            playerBalance += 10; // Player wins $10
            return "Dealer busts! Player wins.";
        }

        if (dealerValue > playerValue)
        {
            return "Dealer wins.";
        }

        if (dealerValue == playerValue)
        {
            playerBalance += 5; // Tie, refund $5
            return "It's a tie.";
        }

        playerBalance += 10; // Player wins $10
        return "Player wins!";
    }

    private string GetCardImage(Card card)
    {
        string suit = card.Suit.ToLower();
        string value = card.Value.ToLower();

        // Convert abbreviated values to full names
        switch (value)
        {
            case "a":
                value = "ace";
                break;
            case "k":
                value = "king";
                break;
            case "q":
                value = "queen";
                break;
            case "j":
                value = "jack";
                break;
        }

        // Append '2' for face cards
        if (value == "king" || value == "queen" || value == "jack")
        {
            return $"/CardImages/{value}_of_{suit}2.png";
        }

        // Return the image path for numeric cards
        return $"/CardImages/{value}_of_{suit}.png";
    }
}
