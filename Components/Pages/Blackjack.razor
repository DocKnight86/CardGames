@rendermode InteractiveServer
@page "/blackjack"
@using CardGames.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject BlackjackService BlackjackService
@inject ILogger<Blackjack> Logger
@inject NavigationManager Navigation

<h3>Blackjack</h3>

<div class="table-container">
    <!-- Dealer's Cards at the top center -->
    <div class="dealer">
        <h4>Dealer's Hand (@BlackjackService.CalculateHandValue(BlackjackService.GetVisibleDealerHand()) points):</h4>
        <ul class="card-list">
            @if (BlackjackService.GetVisibleDealerHand() != null && BlackjackService.GetVisibleDealerHand().Count > 0)
            {
                @foreach (Card card in BlackjackService.GetVisibleDealerHand())
                {
                    <li><img src="@GetCardImage(card)" alt="@card.ToString()" width="100" height="150" /></li>
                }
                @if (!_hasPlayerStood && BlackjackService.GetDealerHand() != null && BlackjackService.GetDealerHand().Count > 1)
                {
                    <!-- Add card container and flip animation -->
                    <li class="card-container">
                        <div class="card @( _hasPlayerStood ? "flipped" : "")">
                            <!-- Front of the card (hidden side before flipping) -->
                            <div class="card-front">
                                <img src="/CardImages/front.png" alt="Hidden Card" width="100" height="150" />
                            </div>
                            <!-- Back of the card (actual card face that will show after flipping) -->
                            <div class="card-back">
                                <img src="@GetCardImage(BlackjackService.GetDealerHand()[1])" alt="Dealer Card" width="100" height="150" />
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>
    </div>

    <!-- Player's Cards directly above Player1's spot -->
    <div class="player-cards">
        <ul class="card-list">
            @if (BlackjackService.GetPlayerHand() != null && BlackjackService.GetPlayerHand().Count > 0)
            {
                @foreach (Card card in BlackjackService.GetPlayerHand())
                {
                    <li><img src="@GetCardImage(card)" alt="@card.ToString()" width="100" height="150" /></li>
                }
            }
        </ul>
    </div>

    <!-- Player spots arranged horizontally below the dealer -->
    <div class="player-spot player-1">Player1</div>
    <div class="player-spot player-2">EMPTY</div>
    <div class="player-spot player-3">EMPTY</div>
    <div class="player-spot player-4">EMPTY</div>
    <div class="player-spot player-5">EMPTY</div>
    <div class="player-spot player-6">EMPTY</div>

    <!-- Game buttons (Start, Hit, Stand) with spacing between them -->
    <div class="game-buttons">
        @if (BlackjackService.GetPlayerHand() == null || BlackjackService.GetDealerHand() == null)
        {
            <button @onclick="StartNewGame">Start New Game</button>
        }
        else
        {
            @if (!_isGameOver)
            {
                <button @onclick="PlayerHit" disabled="@_hasPlayerStood">Hit</button>
                <button @onclick="PlayerStand" disabled="@_hasPlayerStood">Stand</button>
            }
            else
            {
                <button @onclick="StartNewGame">Start New Game</button>
            }
        }
    </div>

    <!-- Player Balance -->
    <div class="player-balance">
        <p>Player Balance: $@_playerBalance</p>
    </div>
</div>

<!-- Table and Player Spot Styling -->
<style>
    .card-list {
        display: flex;
        flex-wrap: nowrap; /* Changed to nowrap to prevent stacking */
        justify-content: center;
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

        .card-list li {
            margin: 5px;
        }

        .card-list img {
            max-width: 100px;
            height: auto;
        }

    /* Flip Animation Styles */
    .card-container {
        perspective: 1500px;
    }

    .card {
        width: 100px;
        height: 150px;
        position: relative;
        transform-style: preserve-3d;
        transition: transform 1s ease-in-out;
    }

    .flipped {
        transform: rotateY(180deg);
    }

    .card-front, .card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
    }

    .card-back {
        transform: rotateY(180deg);
    }

    /* Background table styling */
    .table-container {
        background-image: url('/images/table_background.png');
        background-size: cover;
        position: relative;
        width: 100%;
        height: 600px;
        border-radius: 50%;
        margin: 20px auto;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    /* Dealer cards at the top */
    .dealer {
        position: absolute;
        top: 10%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        width: 300px;
    }

    /* Player spots arranged horizontally below the dealer */
    .player-spot {
        position: absolute;
        text-align: center;
        width: 100px;
        height: 100px;
        border: 2px solid #fff;
        border-radius: 50%;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        line-height: 100px;
        font-size: 1.2em;
    }

    /* Positions adjusted to align player spots below the dealer */
    .player-1 {
        left: 20%;
        top: 70%;
        transform: translate(-50%, -50%);
    }

    .player-2 {
        left: 35%;
        top: 70%;
        transform: translate(-50%, -50%);
    }

    .player-3 {
        left: 50%;
        top: 70%;
        transform: translate(-50%, -50%);
    }

    .player-4 {
        left: 65%;
        top: 70%;
        transform: translate(-50%, -50%);
    }

    .player-5 {
        left: 80%;
        top: 70%;
        transform: translate(-50%, -50%);
    }

    .player-6 {
        left: 95%;
        top: 70%;
        transform: translate(-50%, -50%);
    }

    /* Player's card display (cards in a row above Player1) */
    .player-cards {
        position: absolute;
        top: 60%;
        left: 20%;
        transform: translate(-50%, -50%);
        display: flex;
        justify-content: center;
    }

    /* Player Balance positioning */
    .player-balance {
        position: absolute;
        bottom: 10px;
        text-align: center;
        width: 200px;
    }

    /* Button positioning and spacing */
    .game-buttons {
        position: absolute;
        top: 80%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        gap: 20px;
    }

    button {
        padding: 10px;
    }
</style>

@code {
    private bool _hasPlayerStood = false;
    private bool _isGameOver = false;
    private string _gameResult = string.Empty;
    private int _playerBalance = 500;

    private string _player = "Player1"; // You can replace this with a dynamic player name from your system

    // SignalR HubConnection
    private HubConnection _hubConnection;
    private List<string> _moves = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gameHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMove", (player, move) =>
        {
            _moves.Add($"{player}: {move}");
            Logger.LogInformation($"{player}: {move}"); // Log received move
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync("JoinGame", "gameId_123"); // Replace with dynamic game ID
    }

    private async Task SendMove(string move)
    {
        await _hubConnection.InvokeAsync("SendMove", "gameId_123", _player, move);
        Logger.LogInformation($"Player {_player} sent move: {move}");
    }

    private void StartNewGame()
    {
        BlackjackService.InitializeGame();

        _hasPlayerStood = false;
        _isGameOver = false;
        _gameResult = string.Empty;
        _playerBalance -= 5; // Deduct $5 for each new hand

        // Notify others about the game start
        SendMove("started a new game");

        StateHasChanged();
    }

    private async Task PlayerHit()
    {
        Logger.LogInformation("PlayerHit function activated");
        BlackjackService.GetPlayerHand().Add(BlackjackService.DrawCard());

        if (BlackjackService.IsGameOver())
        {
            EndGame("Player busts!");
        }

        // Notify others about the hit
        SendMove("hit");

        StateHasChanged();
    }

    private async Task PlayerStand()
    {
        Logger.LogInformation("PlayerStand function activated");
        _hasPlayerStood = true;

        // Trigger the flip animation by setting this
        BlackjackService.RevealDealerHand();
        StateHasChanged();

        // Delay for card flip animation to complete
        await Task.Delay(1000); // 1-second delay to simulate the dealer revealing the card

        // Let the dealer finish their hand
        await DealerPlay();
    }

    private async Task DealerPlay()
    {
        int dealerValue = BlackjackService.CalculateHandValue(BlackjackService.GetDealerHand());

        // Dealer will stand if their value is >= 17, otherwise they draw a card
        while (dealerValue < 17)
        {
            // Dealer draws a card
            BlackjackService.GetDealerHand().Add(BlackjackService.DrawCard());
            StateHasChanged(); // Update the UI to reflect the new card

            // Delay before drawing the next card
            await Task.Delay(1000); // 1-second delay

            dealerValue = BlackjackService.CalculateHandValue(BlackjackService.GetDealerHand());
        }

        // Check the final game result and end the game
        EndGame(DetermineGameResult());
    }

    private void EndGame(string result)
    {
        _gameResult = result;
        _isGameOver = true;
    }

    private string DetermineGameResult()
    {
        int playerValue = BlackjackService.CalculateHandValue(BlackjackService.GetPlayerHand());
        int dealerValue = BlackjackService.CalculateHandValue(BlackjackService.GetDealerHand());

        if (dealerValue > 21)
        {
            _playerBalance += 10; // Player wins $10
            return "Dealer busts! Player wins.";
        }

        if (dealerValue > playerValue)
        {
            return "Dealer wins.";
        }

        if (dealerValue == playerValue)
        {
            _playerBalance += 5; // Tie, refund $5
            return "It's a tie.";
        }

        _playerBalance += 10; // Player wins $10
        return "Player wins!";
    }

    private string GetCardImage(Card card)
    {
        string suit = card.Suit.ToLower();
        string value = card.Value.ToLower();

        switch (value)
        {
            case "a":
                value = "ace";
                break;
            case "k":
                value = "king";
                break;
            case "q":
                value = "queen";
                break;
            case "j":
                value = "jack";
                break;
        }

        if (value == "king" || value == "queen" || value == "jack")
        {
            return $"/CardImages/{value}_of_{suit}2.png";
        }

        return $"/CardImages/{value}_of_{suit}.png";
    }
}
